name: Telos CI/CD

on:
  push:
    branches:
      - master
      - develop
    tags:
      - "v*"
  pull_request:
    branches:
      - master
      - develop

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.10"]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python }} on ${{ matrix.os }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Install Git LFS
        if: runner.os != 'Windows'
        run: |
          curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
          sudo apt-get install git-lfs
          git lfs install
      - name: Install Git LFS (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install git-lfs
          git lfs install
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
          pip install dynaconf
          pip install tox
      - name: Download models
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          git config --global credential.helper store
          echo "https://USER:$HF_TOKEN@huggingface.co" > ~/.git-credentials
          git clone https://huggingface.co/liferecords/Telos.git telos/models
      - name: Run tests
        run: |
          tox -e py

  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox isort black
      - name: Run isort
        run: isort .
      - name: Run black
        run: black .
      - name: Run linting
        run: |
          tox -e isort
          tox -e pylint
      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Apply automatic formatting changes"
          file_pattern: "*.py"

  build:
    needs: [test, linting]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade poetry
      - name: Build package
        run: poetry build
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  create-release:
    needs: publish
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false